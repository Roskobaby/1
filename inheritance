#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Define the person structure
typedef struct person
{
    struct person *parents[2]; // Pointers to two parents
    char alleles[2];           // Two alleles (e.g., 'A', 'B', 'O')
} person;

// Function prototypes
person *create_family(int generations);
void free_family(person *p);
void print_family(person *p, int generation);
char random_allele(void);

// Main function
int main(void)
{
    // Seed random number generator
    srand(time(0));

    // Create a new family with three generations
    person *p = create_family(3);

    // Print family tree of blood types
    print_family(p, 0);

    // Free memory
    free_family(p);

    return 0;
}

// Function to create a family of 'generations' generations
person *create_family(int generations)
{
    // Allocate memory for a new person
    person *new_person = malloc(sizeof(person));

    // Base case: if no generations left, no parents, assign random alleles
    if (generations == 1)
    {
        new_person->parents[0] = NULL;
        new_person->parents[1] = NULL;
        new_person->alleles[0] = random_allele();
        new_person->alleles[1] = random_allele();
    }
    else
    {
        // Recursively create two parents
        person *parent0 = create_family(generations - 1);
        person *parent1 = create_family(generations - 1);

        // Set parent pointers for the current person
        new_person->parents[0] = parent0;
        new_person->parents[1] = parent1;

        // Randomly assign alleles based on the alleles of the parents
        new_person->alleles[0] = parent0->alleles[rand() % 2];
        new_person->alleles[1] = parent1->alleles[rand() % 2];
    }

    return new_person;
}

// Function to free memory for a person and all their ancestors
void free_family(person *p)
{
    // Base case: if p is NULL, do nothing
    if (p == NULL)
    {
        return;
    }

    // Recursively free the parents
    free_family(p->parents[0]);
    free_family(p->parents[1]);

    // Free the current person
    free(p);
}

// Function to print the family tree and blood types
void print_family(person *p, int generation)
{
    if (p == NULL)
    {
        return;
    }

    // Print the current person's blood type
    printf("Generation %d: blood type %c%c\n", generation, p->alleles[0], p->alleles[1]);

    // Recursively print the family tree
    print_family(p->parents[0], generation + 1);
    print_family(p->parents[1], generation + 1);
}

// Function to generate a random allele ('A', 'B', or 'O')
char random_allele(void)
{
    int r = rand() % 3; // Random number between 0 and 2
    if (r == 0)
        return 'A';
    else if (r == 1)
        return 'B';
    else
        return 'O';
}
